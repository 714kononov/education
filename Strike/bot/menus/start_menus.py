from operator import and_

from aiogram import types
from bot.core.states import Human
from bot.core.aiogram import bot
from bot.database.control import save_booking_to_db, show_all_bookings, show_user_book
from bot.database.model import table1
from datetime import datetime, timedelta
from bot.payment.generate_summ import generate_payment_link


async def choose_game(user_id):
    choose_game=[1,2]
    keyboard=types.InlineKeyboardMarkup(row_width=2)
    buttons=[
        types.InlineKeyboardButton(text="–ë–∏–ª—å—è—Ä–¥",callback_data=f'game: {choose_game[0]}'),
        types.InlineKeyboardButton(text="–ë–æ—É–ª–∏–Ω–≥",callback_data=f'game: {choose_game[1]}')
    ]
    cancel=types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data='goback1')
    keyboard.add(*buttons)
    keyboard.add(cancel)
    await bot.send_message(user_id,"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏–≥—Ä—ã: ",reply_markup=keyboard)

async def startmenu(message):
    photo = '/Users/admin/Desktop/ForStrike1.jpg'
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
            types.InlineKeyboardButton(text="–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="btnContact"),
            types.InlineKeyboardButton(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",disable=True, callback_data="btnChooseGame"),
            types.InlineKeyboardButton(text="–ú–æ–∏ –±—Ä–æ–Ω–∏", callback_data="btnShowBook"),
            types.InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data='btnPrice')
        ]
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id,"–ü—Ä–∏–≤–µ—Ç!",reply_markup=keyboard)

async def contact(callback_query):
    await bot.send_message(callback_query.from_user.id,
                           "–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –≥.–ü–µ–Ω–∑–∞, –¢–¶ –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π, —É–ª. –°—É–≤–æ—Ä–æ–≤–∞, 144–ê (—ç—Ç–∞–∂ 0)")
    await bot.send_message(callback_query.from_user.id, "–ù–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:+7 (8412) 23-60-60,+7 (8412) 39-76-16")
    await bot.send_message(callback_query.from_user.id,
                           "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:–ø–Ω-—á—Ç 12:00‚Äì00:00; –ø–Ω 12:00‚Äì01:00; —Å–± 10:00‚Äì01:00; –≤—Å 10:00‚Äì00:00")
    await callback_query.answer()
    await startmenu(callback_query)

async def getnumber(message):
    chat_chat = message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btnCancel"),
    ]
    keyboard.add(*buttons)
    await bot.send_message(chat_id=chat_chat, text="–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 89043235543: ",reply_markup=keyboard)
    await Human.Number.set()

async def time_gameplay(callback_query,data):
    keyboard = types.InlineKeyboardMarkup()
    buttons = []
    time_to_play = ["1 ", "2 ", "3", "4 ", "5"]
    if data.get('game')==" 1":
        time_to_play = ["1", "2 ", "3", "4", "5 ","–ü–æ —Ñ–∞–∫—Ç—É"]
        for time in time_to_play:
            time_button = types.InlineKeyboardButton(text=f'{str(time)}', callback_data=f'btntimeGamePlay:{time}')
            buttons.append(time_button)
        keyboard.add(*buttons)
    else:
        for time in time_to_play:
            time_button = types.InlineKeyboardButton(text=f'{str(time)}', callback_data=f'btntimeGamePlay:{time}')
            buttons.append(time_button)
        keyboard.add(*buttons)
    cancel=types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='goback1')
    goback = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='goback4')
    keyboard.add(cancel)
    keyboard.add(goback)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã(–≤ —á–∞—Å–∞—Ö): ", reply_markup=keyboard)

async def getname(callback_query):
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btnCancel"),
    ]
    keyboard.add(*buttons)
    await bot.send_message(callback_query.from_user.id, text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è: ",reply_markup=keyboard)
    await Human.Name.set()

from aiogram import types

async def show_table(callback_query, data, state):
    try:
        user_id = callback_query.from_user.id
        selected_date = data.get('date')
        selected_time = data.get('time')
        selected_duration = data.get('end_time')
        act_type = data.get('game')  # Assuming actType is present in your data

        # Modify the query based on actType
        booked_tables = table1.select(table1.objNum).where(
            (table1.start_date == selected_date) &
            (table1.start_time <= selected_time) &
            (table1.end_time >= selected_duration) &
            (table1.actType == act_type)
        )

        booked_table_numbers = [booking.objNum for booking in booked_tables]
        all_tables = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]
        all_track=["1", "2", "3", "4", "5", "6", "7", "8", "9"]
        print(booked_table_numbers)
        if data.get('game')==' 1':
            available_tables = [table for table in all_tables if table not in booked_table_numbers]
            print(available_tables)
        if data.get('game')==' 2':
            available_track = [table for table in all_track if table not in booked_table_numbers]
            print(available_track)


        keyboard = types.InlineKeyboardMarkup(row_width=True)
        if data.get('game')==' 1':
            for table in available_tables:
                keyboard.add(types.InlineKeyboardButton(text=str(table), callback_data=f"btnPlace:{table}"))
        if data.get('game')==' 2':
            for track in available_track :
                keyboard.add(types.InlineKeyboardButton(text=str(track), callback_data=f"btnPlace:{track}"))


        cancel = types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="btnCancel")
        btnBack = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="goback5")

        keyboard.add(btnBack)
        keyboard.add(cancel)

        await bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –∏–≥—Ä—ã:', reply_markup=keyboard)
    except:
        await startmenu(callback_query)

async def go_to_pay(callback_query, data):
    game_type = data.get('game')  # 1 –¥–ª—è –±–∏–ª—å—è—Ä–¥–∞, 2 –¥–ª—è –±–æ—É–ª–∏–Ω–≥–∞
    start_time = datetime.strptime(data.get('time'), "%H:%M")
    day_of_week = datetime.strptime(data.get('date'), "%d/%m/%Y").weekday()
    amount=0
    if game_type == ' 1':
        if 0 <= day_of_week <= 3:  # –ü–Ω-–ß—Ç
            if 12 <= start_time.hour < 18:
                amount = 250
            elif 18 <= start_time.hour < 24:
                amount = 350
        elif day_of_week == 4:  # –ü—Ç
            if 12 <= start_time.hour < 18:
                amount = 250
            elif 18 <= start_time.hour < 1:
                amount = 350
        elif day_of_week == 5:  # –°–±
            if 10 <= start_time.hour < 1:
                amount = 350
        elif day_of_week == 6:  # –í—Å
            if 10 <= start_time.hour < 24:
                amount = 350
    elif game_type == ' 2':
        if 0 <= day_of_week <= 3:  # –ü–Ω-–ß—Ç
            if 12 <= start_time.hour < 17:
                amount = 500
            elif 17 <= start_time.hour < 24:
                amount = 700
        elif day_of_week == 4:  # –ü—Ç
            if 12 <= start_time.hour < 17:
                amount = 700
            elif 17 <= start_time.hour < 1:
                amount = 900
        elif day_of_week == 5:  # –°–±
            if 10 <= start_time.hour < 1:
                amount = 900
        elif day_of_week == 6:  # –í—Å
            if 10 <= start_time.hour < 24:
                amount = 900

    else:
        print('–Ω–µ —Ñ—É—Ä—ã—á–∏—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ start_menu/go_to_pay')

    invoice_id = "restorankinza"
    payment_link = await generate_payment_link(amount, invoice_id)

    # –ó–∞–º–µ–Ω–∏—Ç–µ 'USER_CHAT_ID' –Ω–∞ ID —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_chat_id = callback_query.from_user.id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(chat_id=user_chat_id, text=f"–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç: {payment_link}")

async def savedatabase(message,data):

    chat_chat = message.chat.id
    user_id = message.from_user.id
    table1.confirmed_coach="–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω—É–∂–µ–Ω!"
    if data.get('game') == " 1":
        await bot.send_message(chat_id=chat_chat,text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –±–∏–ª—å—è—Ä–¥  –Ω–∞ –∏–º—è: {data['name']}, {data['date']} —á–∏—Å–ª–∞! üéâ")
        await go_to_pay(message,data)
    else:
        await bot.send_message(chat_id=chat_chat,text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –±–æ—É–ª–∏–Ω–≥  –Ω–∞ –∏–º—è: {data['name']}, {data['date']} —á–∏—Å–ª–∞! üéâ")
        await go_to_pay(message,data)
    await save_booking_to_db(data, user_id)
    await startmenu(message)



async def show_book(callback_query):
    user_id=callback_query.from_user.id
    await show_user_book(callback_query,user_id)

async def show_booking_keyboard(callback_query):
    user_id=callback_query.from_user.id
    await show_all_bookings(callback_query,user_id)

async def check_booking_pay_or_not(callback_query, user_id):
    try:
        booking = table1.get(table1.user_id == user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –±—Ä–æ–Ω—å
        if booking.pay == "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ":
            await bot.send_message(callback_query.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –±—Ä–æ–Ω—å!")
            return 0
        else:
            return 1
    except table1.DoesNotExist:
        return 1





